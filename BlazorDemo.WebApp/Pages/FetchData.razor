@page "/fetchdata"
@using BlazorDemo.Shared
@using BlazorDemo.WebApp.State
@using BlazorDemo.WebApp.Action;
@using SoloX.ActionDispatch.Core.Dispatch
@using SoloX.ActionDispatch.Core.Utils
@using System.Threading

@inject IDispatcher<IAppState> Dispatcher;

@inject IWeatherForcastService WeatherForcastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    IEnumerable<WeatherForecast> forecasts;

    protected override void OnInitialized()
    {
        this.Dispatcher.Dispatch(new LoadWeatherForcastBehavior(WeatherForcastService), s => s.WeatherState);

        var subscription = Dispatcher.State.SelectWhenChanged(s => s.WeatherState).Subscribe((s) =>
        {
            forecasts = s.Forecasts;

            this.StateHasChanged();
        });
    }
}
